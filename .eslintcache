[{"/home/jmh/workspace/projects/kroz/src/constants.ts":"1","/home/jmh/workspace/projects/kroz/src/engine.ts":"2","/home/jmh/workspace/projects/kroz/src/entities.ts":"3","/home/jmh/workspace/projects/kroz/src/levels/debug.ts":"4","/home/jmh/workspace/projects/kroz/src/world.ts":"5"},{"size":463,"mtime":1735688108643,"results":"6","hashOfConfig":"7"},{"size":4542,"mtime":1735690587312,"results":"8","hashOfConfig":"7"},{"size":1127,"mtime":1735687253703,"results":"9","hashOfConfig":"7"},{"size":1739,"mtime":1735685581514,"results":"10","hashOfConfig":"7"},{"size":32705,"mtime":1735688091083,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"seh061",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jmh/workspace/projects/kroz/src/constants.ts",[],[],"/home/jmh/workspace/projects/kroz/src/engine.ts",[],[],"/home/jmh/workspace/projects/kroz/src/entities.ts",[],[],"/home/jmh/workspace/projects/kroz/src/levels/debug.ts",[],[],"/home/jmh/workspace/projects/kroz/src/world.ts",[],["27","28"],{"ruleId":"29","severity":2,"message":"30","line":349,"column":35,"nodeType":"31","messageId":"32","endLine":349,"endColumn":38,"suggestions":"33","suppressions":"34"},{"ruleId":"35","severity":2,"message":"36","line":1126,"column":5,"nodeType":"37","messageId":"38","endLine":1127,"endColumn":13,"suppressions":"39"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["40","41"],["42"],"no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default",["43"],{"messageId":"44","fix":"45","desc":"46"},{"messageId":"47","fix":"48","desc":"49"},{"kind":"50","justification":"51"},{"kind":"50","justification":"51"},"suggestUnknown",{"range":"52","text":"53"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"54","text":"55"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.","directive","",[8585,8588],"unknown",[8585,8588],"never"]